function [BCf, UnitOffset] = ...
    AbaqusBC(M4Nodes,M4Elements, dicdata, MatP, Crack, resultsDir,TriM)
% create an abaqus model
% you need >> 
% M4Nodes from the created mesh, thsi is nromally an output
% M4Elements which is one lement set
% dicdata (Displacement data arranged as vectors, example
% [X(:) Y(:) Ux(:) Uy(:)]
% load([resultsDir '\Intergated Uxy.mat'])
% 
% Crack which contain the crack x and y coordianted with Crack(1,:) is for
% the crack tip and Crack(2,:) for the crack end >> 
% MatP includes 
% 	E (Young's Modulus [Pa]) or 
% 	Stiffness (Stiffness tensor), if 'Elastic-Anisotropic' 
% 	nu (Poisson's ratio)          
%   Mat (Material Name)
%   type 'E' for Elastic or 'R' for Ramberg-Osgood or 'A' for Elastic-Anisotropic
%   if 'Ramberg-Osgood' type of material input                
%   Exponent
%   Yield_offset
%   yield (Yield Stress [Pa] )
%   input_unit %'m', 'mm', 'um'

%% missing variable
fclose all;
disp('1.  Collecting missing variables and adjust units')
if isempty(M4Nodes)
    fstruct = dir(fullfile(resultsDir,'*Integrated*.mat'));
    load(fullfile(fstruct.folder,fstruct.name),'Ux','Uy','X1','Y1','M4');
    dicdata    = [X1(:) Y1(:) Ux(:) Uy(:)];
    M4Nodes    = M4.Nodes;              
    M4Elements = M4.Elements;    
else
    [~,daum] = reshapeData(dicdata);
    X1 = daum.X1;           Y1 = daum.Y1;     
    Ux = daum.Ux;           Uy = daum.Uy;
end
if ~exist('TriM','var')
    UX = MoreOutNaN(Ux,unique(X1)); % remove outliers
    Ux(isnan(UX))=NaN;      Uy(isnan(Ux))=NaN;      
    X1(isnan(Ux))=NaN;      Y1(isnan(Ux))=NaN;
end
DICdata = [X1(:) Y1(:) Ux(:) Uy(:)];

if isempty(MatP)
    fstruct = dir(fullfile(resultsDir,'*Data2Abaqus_*.mat'));
    load(fullfile(fstruct.folder,fstruct.name),'Dir');      
    MatP = Dir;
end

if isempty(Crack)   
    Um = (Ux.^2+Uy.^2).^0.5;
    close all;      contourf(X1,Y1,Um,'LineStyle','none','HandleVisibility','off');  
    set(gca,'Ydir','reverse');	axis image; axis off; colormap jet
    set(gcf,'position',[30 50 1300 950]); c=colorbar;
    if strcmpi(MatP.input_unit, 'um'); UnI = '\mum'; 
    else  UnI = MatP.input_unit; end
    c.Label.String=['U_{Mag.} [' UnI ']'];
    try
        xo=MatP.xo;  yo=MatP.yo;
    catch
        [xo,yo] = ginput(2);
    end
%     title('U_Y :: Select the crack tip start from crack tip');[xo,yo] = ginput(2); 
    xLin       = unique(X1);
    [~, index] = min(abs(xLin-xo(1)));      xo(1) = xLin(index);
    yLin       = unique(Y1);
    [~, index] = min(abs(yLin-yo(1)));      yo(1) = yLin(index);
    Crack = [xo(1) yo(1); xo(2) yo(2)];     
    hold on; plot(xo(1),yo(1),'pk','LineStyle','-.','MarkerSize',14,...
    'MarkerEdgeColor','w','MarkerFaceColor','k'); hold off;  
    legend('Crack Tip','location','best')
    saveas(gcf,[resultsDir '\DIC2ABAQUS Coodrinate.fig']);
    saveas(gcf,[resultsDir '\DIC2ABAQUS Coodrinate.tif'],'tiffn');  close
end

[~,Kl,~] = fileparts(resultsDir);
resultsDir = [resultsDir '\Abaqus Model'];     mkdir(resultsDir);

% unit set
switch MatP.input_unit
    case 'mm'   % conver to m
         UnitOffset = 1e-3;
    case 'um'	% conver to m        
        UnitOffset = 1e-6;          
end
% [~,~,~,~,~,M4Nodes,M4Elements,~] = Meshing(dicdata,2,'Strain');

%% Nodes
disp('2.  Writing Nodes');
Nodes     = cell(length(M4Nodes)+9,1);
Nodes(1)  = cellstr('*Heading'); 
Nodes(2)  = cellstr(['** Job name: ' Kl 'Model name: Model-1']); 
Nodes(3)  = cellstr('** Generated by: Abaqus/CAE 2016'); 
Nodes(4)  = cellstr('*Preprint, echo=NO, model=NO, history=NO, contact=NO'); 
Nodes(5)  = cellstr('**'); 
Nodes(6)  = cellstr('** PARTS'); 
Nodes(7)  = cellstr('**'); 
Nodes(8)  = cellstr('*Part, name=sample'); 
Nodes(9)  = cellstr('*Node');   %Generate Nodes in Input File

[NNode, ND] = size(M4Nodes);
if ND == 3  %2D                               
    for i=1:1:NNode   
    Nodes(9+i) = cellstr(['      ' num2str(M4Nodes(i,1)) ',   ' num2str(M4Nodes(i,2)) ...
                            ',   ' num2str(M4Nodes(i,3)) ]); 
    end
elseif ND==4  %3D 
    for i=1:1:NNode
    Nodes(9+i) = cellstr(['      ' num2str(M4Nodes(i,1)) ',   ' num2str(M4Nodes(i,2)) ...
                            ',   ' num2str(M4Nodes(i,3)) ',   ' num2str(M4Nodes(i,4)) ]); 
    end      
end

%% Generate Elements in Input File
disp('3.  Writing elements');
Ele = cell(length(M4Elements)+1,1);
if strcmpi(MatP.stressstat, 'plane_strain')
    Ele(1)  =  cellstr('*ELEMENT, ELSET=Set1, TYPE=CPE4');
else
    Ele(1)  =  cellstr('*ELEMENT, ELSET=Set1, TYPE=CPS4');
end

for j=1:length(M4Elements)      % Loop for the elements in the elements set
    clearvars NNN
	NNN = num2str(M4Elements(j,1));
	for k=2:length(M4Elements(j,:))    
        NNN = [NNN ', ' num2str(M4Elements(j,k)) ];
    end
    Ele(j+1)  =  cellstr(NNN);
end

%%
disp('4.  Writing element sets');
StP = sort(M4Elements(:,2));
SelectSet    = cell(ceil(length(StP)/16)+17,1);
SelectSet(1) =  cellstr('*Elset, elset=Set1, internal');
for k=1:16:length(StP)-1
    clearvars NNN
    NNN = [num2str(StP(k+1)) ', '];
    if k < length(StP)-16
        for ik = 2:15
            NNN = [NNN num2str(StP(k+ik)) ', '];
        end
        SelectSet(ceil(k/16)+1) = cellstr(strcat([NNN, '' num2str(StP(k+16))]));
    else
        for ik = 2:length(StP)-k-1
            NNN = [NNN num2str(StP(k+ik)) ', '];
        end
        SelectSet(ceil(k/16)+1) = cellstr(strcat([NNN, '' num2str(StP(length(StP)))]));
    end
end

%%
disp('5.  Writing Materials Orientation and Assembly');
Assmp     =  cell(16,1);
Assmp(1)  =  cellstr('*Orientation, name=Ori-2');
Assmp(2)  =  cellstr('1., 0., 0., 0., 1., 0.');
Assmp(3)  =  cellstr('3, 0.');
Assmp(4)  =  cellstr('** Section: Section-1');
Assmp(5)  =  cellstr(['*Solid Section, elset=Set1, orientation=Ori-2, material=' MatP.Mat]);
Assmp(6)  =  cellstr(',');
Assmp(7)  =  cellstr('*End Part');
Assmp(8)  =  cellstr('**');
Assmp(9)  =  cellstr('**');
Assmp(10) =  cellstr('** ASSEMBLY');
Assmp(11) =  cellstr('**');
Assmp(12) =  cellstr('*Assembly, name=Assembly');
Assmp(13) =  cellstr('**');
Assmp(14) =  cellstr('*Instance, name=sample-1, part=sample');
Assmp(15) =  cellstr('*End Instance');
Assmp(16) =  cellstr('**');

%%
disp('6.  Writing instances and node lists');
% M4Nodes = M4.Nodes;       M4Elements = M4.Elements;
[IX,~] = ismember(M4Nodes(:,2:3),dicdata(:,1:2));
ix     = sum(IX,2);             
iC = ix;    iC(iC~=2)=[];
if length(iC)==length(dicdata)
    M4Nodes(ix~=2,:) = [];
    Datum  = [M4Nodes(:,1) DICdata];
else
    for io=1:length(dicdata)
        id = M4Nodes(:,2:3) == dicdata(io,1:2);
        id = sum(id,2);
        Datum(io,1) = find(id==2);
    end
    Datum = [Datum(:,1) DICdata];
end
%{
Datum  = M4Nodes(M4.Elements(:,1),1);
Fx = scatteredInterpolant(dicdata(:,1),dicdata(:,2),dicdata(:,3),'natural');
Fy = scatteredInterpolant(dicdata(:,1),dicdata(:,2),dicdata(:,4),'natural');
Datum(:,4) = Fx(Datum(:,2),Datum(:,3));
Datum(:,5) = Fy(Datum(:,2),Datum(:,3));
Datum(Datum(:,5)==0,:)=NaN;
Datum(isnan(Datum(:,5)),:)=[];
%}
patchASSEM = cell(2*length(Datum)+4,1);
for k=1:size(Datum,1)
    if ~isnan(Datum(k,4))
        patchASSEM(k*2-1) =  cellstr(strcat(['*Nset, nset=_PickedSet',...
                    num2str(Datum(k,1)), ', internal, instance=sample-1']));
        patchASSEM(k*2)   =  cellstr([num2str(Datum(k,1)),',']);
    end
end
kk = Datum(k,1);
% crack tip
id = M4Nodes(:,2:3) == Crack(1,:);	id = sum(id,2);  Crack1(1) = find(id==2);
patchASSEM(k*2+1) =  cellstr(strcat('*Nset, nset=_PickedSet',num2str(kk+1), ...
                  ', internal, instance=sample-1'));
patchASSEM(k*2+2) =  cellstr([num2str(Crack1(1)),',']);
patchASSEM(k*2+3) =  cellstr(strcat('*Nset, nset=_PickedSet',num2str(kk+2), ...
                  ', internal, instance=sample-1'));
patchASSEM(k*2+4) =  cellstr([num2str(Crack1(1)),',']);

%% Materials Prop
disp('7.  Writing Materil propreties');
Mate     =  cell(17,1);
Mate(1)  =  cellstr('*End Assembly');
Mate(2)  =  cellstr('** ');
Mate(3)  =  cellstr('** MATERIALS');
Mate(4)  =  cellstr('** ');
Mate(5)  =  cellstr(['*Material, name=' MatP.Mat]);
if  MatP.type == 'A'
    Mate(6)  =  cellstr('*Elastic, type=ANISOTROPIC');
    C = MatP.Stiffness;
    if C(1,1) < 1e6; 	C = C.*1e9;       	disp('Check Modulus Units .. Corretced');    end
       C = C.*UnitOffset^2;
        Mate(7)  =  cellstr([' ',num2str(C(1,1)),', ',num2str(C(1,2)),', ',num2str(C(2,2)),', ',num2str(C(1,3)),...
                            ', ',num2str(C(2,3)),', ',num2str(C(3,3)),', ',num2str(C(1,4)),', ',num2str(C(2,4))]);                  
        Mate(8)  =  cellstr([' ',num2str(C(3,4)),', ',num2str(C(4,4)),', ',num2str(C(1,5)),', ',num2str(C(2,5)),...
                            ', ',num2str(C(3,5)),', ',num2str(C(4,5)),', ',num2str(C(5,5)),', ',num2str(C(1,6))]);
        Mate(9)  =  cellstr([' ',num2str(C(2,6)),', ',num2str(C(3,6)),', ',num2str(C(4,6)),', ',num2str(C(5,6)),...
                            ', ',num2str(C(6,6))]);
elseif MatP.type == 'R'
    Mate(6)  =  cellstr('*Plastic');
    if MatP.E < 1e6;    MatP.E=MatP.E*1e9;	
        disp('Check Modulus Units .. Corretced'); end
    if MatP.E < 1e6;    MatP.yield=MatP.yield*1e9;	
        disp('Check Modulus Units .. Corretced');   end
	MatP.E=MatP.E*UnitOffset^2;     MatP.yield=MatP.yield*UnitOffset^2;
    Mate(7)  =  cellstr([' ',MatP.E,', ',MatP.nu,', ',MatP.yield,', ' ...
                             MatP.Exponent,', ',MatP.Yield_offset]);
    Mate(8)  =  cellstr('** ');
    Mate(9)  =  cellstr('** ');
elseif MatP.type == 'E'
    Mate(6)  =  cellstr('*Elastic');
    if MatP.E < 1e6;    MatP.E=MatP.E*1e9;	disp('Check Modulus Units .. Corretced');    end
    MatP.E = MatP.E*UnitOffset^2;  
    Mate(7)  =  cellstr([' ',MatP.E,', ',MatP.nu]);
    Mate(8)  =  cellstr('** ');
    Mate(9)  =  cellstr('** ');
end

Mate(10) =  cellstr('** ----------------------------------------------------------------');
Mate(11) =  cellstr('** ');
Mate(12) =  cellstr('** STEP: Step-1');
Mate(13) =  cellstr('** ');
Mate(14) =  cellstr('*Step, name=Step-1, nlgeom=NO');
Mate(15) =  cellstr('*Static');
Mate(16) =  cellstr('1., 1., 1e-05, 1.');
Mate(17) =  cellstr('** ');

%%
disp('8.  Writing Boundary Conditions');
patchBC    =  cell(4*length(Datum)+2,1);
patchBC(1) =  cellstr('** BOUNDARY CONDITIONS');
patchBC(2) =  cellstr('**');
for k=1:size(Datum,1)
    if ~isnan(Datum(k,4))
        patchBC(2+k*4-3) = cellstr(strcat(['** Name: BC-', num2str(Datum(k,1)),...
                                        ' Type: Displacement/Rotation']));
        patchBC(2+k*4-2) = cellstr('*Boundary');
        patchBC(2+k*4-1) = cellstr(strcat(['_PickedSet',num2str(Datum(k,1)),...
                                        ', 1, 1, ',num2str(Datum(k,4))]));
        patchBC(2+k*4)   = cellstr(strcat(['_PickedSet',num2str(Datum(k,1)),...
                                         ', 2, 2, ',num2str(Datum(k,5))]));
    end
end

%% 
disp('9.  Writing Output request');
Outputd     =  cell(24 ,1);
Outputd(1)  =  cellstr('** ');
Outputd(2)  =  cellstr('** OUTPUT REQUESTS');
Outputd(3)  =  cellstr('** ');
Outputd(4)  =  cellstr('*Restart, write, frequency=0');
Outputd(5)  =  cellstr('** ');
Outputd(6)  =  cellstr('** FIELD OUTPUT: F-Output-1');
Outputd(7)  =  cellstr('** ');
Outputd(8)  =  cellstr('*Output, field, variable=PRESELECT');
Outputd(9)  =  cellstr('** ');
Outputd(11) =  cellstr('** HISTORY OUTPUT: H-Output-1');
Outputd(12) =  cellstr('** ');
Outputd(13) =  cellstr('*Output, history, variable=PRESELECT');
Outputd(14) =  cellstr('** ');
Outputd(15) =  cellstr('** HISTORY OUTPUT: OutpJint');
Outputd(16) =  cellstr('** ');
Coun = round(min([length(unique(dicdata(:,1))) length(unique(dicdata(:,2)))])*0.5-1,0);
Outputd(17) =  cellstr(['*Contour Integral, crack name=OutpJint_Crack-1, ' ... 
                        'contours=' num2str(Coun) ', crack tip nodes']);
Outputd(18) =  cellstr(['_PickedSet',num2str(kk+1),', _PickedSet',...
                        num2str(kk+2),', 1., 0., 0.']);
if MatP.type ~= 'R'
    Outputd(19) =  cellstr('** ');
    Outputd(20) =  cellstr('** HISTORY OUTPUT: OutpKval');
    Outputd(21) =  cellstr('** ');
    Outputd(22) =  cellstr(['*Contour Integral, crack name=OutpKval_Crack-1, '...
                        'contours=' num2str(Coun) ', crack tip nodes, type=K FACTORS']);
    Outputd(23) =  cellstr(['_PickedSet',num2str(kk+1),', _PickedSet',...
                            num2str(kk+2),', 1., 0., 0.']);
    Outputd(24) =  cellstr('*End Step');
else
    Outputd(19) =  cellstr('*End Step');
end

%% Find where to inject the BC patch
% finalform = [Nodes;Ele;SelectSet;Assmp;patchASSEM;Mate;patchBC;Outputd];
finalform = [Nodes;Ele;Assmp;patchASSEM;Mate;patchBC;Outputd];

%% Write outputfile
fprintf('10. Writing .inp file .. ');
BCf = [resultsDir '\' MatP.unique '.inp'];
fileID = fopen(BCf,'w');
for i=1:size(finalform,1)
    stri = finalform(i);
    if ~cellfun('isempty',stri)
        fprintf(fileID,'%s\n',char(stri));
    end
end
fclose(fileID);
fprintf('Done\nCheck %s for the abaqus .inp model\n',BCf);
BCf = erase(BCf,'.inp');
end